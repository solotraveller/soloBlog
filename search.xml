<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>组件通信</title>
      <link href="2021/03/20/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>2021/03/20/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>父子组件间的通信</p><span id="more"></span>        <h5 id="向子组件传值-Prop">          <a href="#向子组件传值-Prop" class="heading-link"><i class="fas fa-link"></i></a><a href="#向子组件传值-Prop" class="headerlink" title="向子组件传值 (Prop )"></a>向子组件传值 (Prop )</h5>      <p><strong>Prop</strong>是组件上自定义的 attribute。prop是单向绑定，数据只能父传子。</p><ul><li><p>childComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ childComponentHello }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> ...,   <span class="attr">props</span>:[<span class="string">'childComponentHello'</span>] <span class="comment">//父组件和子组件的连接点</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>parentComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>parentComponent<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childComponent</span> <span class="attr">:childComponentHello</span>=<span class="string">'hello'</span>&gt;</span><span class="tag">&lt;/<span class="name">childComponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> { <span class="attr">hello</span>:<span class="string">'hello'</span> }</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h5 id="向父组件传值-emit">          <a href="#向父组件传值-emit" class="heading-link"><i class="fas fa-link"></i></a><a href="#向父组件传值-emit" class="headerlink" title="向父组件传值( $emit )"></a>向父组件传值( $emit )</h5>      <ul><li><p>childComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> @<span class="attr">click</span>=<span class="string">'sendMsg'</span> <span class="attr">value</span>=<span class="string">"向父组件传值"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{<span class="keyword">return</span>{ <span class="attr">msg</span>:<span class="string">'子组件的值'</span> }},</span></span><br><span class="line">    methods:{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">sendMsg</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">'parentFn'</span>,<span class="built_in">this</span>.msg)</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>parentComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">childComponent</span> @<span class="attr">parentFn</span>=<span class="string">"getChildMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">childComponent</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">methods:{</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getChildMsg</span>(<span class="params">data</span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'ChildMsg:'</span>+ data)</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h5 id="调用父组件方法">          <a href="#调用父组件方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用父组件方法" class="headerlink" title="调用父组件方法"></a>调用父组件方法</h5>              <h6 id="1-emit">          <a href="#1-emit" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-emit" class="headerlink" title="1.$emit"></a>1.$emit</h6>      <ul><li><p>childComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    methods:{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">childMethod</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">'fatherMethod'</span>);</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>parentComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childComponent</span> @<span class="attr">fatherMethod</span>=<span class="string">'fatherMethod'</span>&gt;</span><span class="tag">&lt;/<span class="name">childComponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    methods:{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">fatherMethod</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'this is fatherMethod'</span>)</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h6 id="2-parent">          <a href="#2-parent" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-parent" class="headerlink" title="2.$parent"></a>2.$parent</h6>      <ul><li><p>childComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    methods:{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">childMethod</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$parent.fatherMethod()</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>parentComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">childComponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    methods:{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">fatherMethod</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'this is fatherMethod'</span>)</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h6 id="3-传递方法-Prop">          <a href="#3-传递方法-Prop" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-传递方法-Prop" class="headerlink" title="3. 传递方法 $Prop"></a>3. 传递方法 $Prop</h6>      <ul><li><p>childComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"childMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    props:{</span><br><span class="line">        fatherMethod:{</span><br><span class="line"><span class="javascript">            type:<span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="literal">null</span></span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    methods:{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">childMethod</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">this</span>.fatherMethod){</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fatherMethod()</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>parentComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childComponent</span> <span class="attr">:fatherMethod</span>=<span class="string">"fatherMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">childComponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    methods:{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">fatherMethod</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'this is fatherMethod'</span>)</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h5 id="调用子组件方法">          <a href="#调用子组件方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用子组件方法" class="headerlink" title="调用子组件方法"></a>调用子组件方法</h5>              <h6 id="1-ref">          <a href="#1-ref" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-ref" class="headerlink" title="1. ref"></a>1. ref</h6>      <ul><li><p>childComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    methods:{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">childMthodOne</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>,log(<span class="string">'this is childMthodOne'</span>)</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>parentComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childComponent</span> <span class="attr">ref</span>=<span class="string">childMthods</span>&gt;</span><span class="tag">&lt;/<span class="name">childComponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    methods{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">f</span>(<span class="params"></span>)</span>{</span></span><br><span class="line">            ...</span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$refs.childMthods.childMthodOne();</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h6 id="2-emit、-on">          <a href="#2-emit、-on" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-emit、-on" class="headerlink" title="2. $emit、$on"></a>2. $emit、$on</h6>      <ul><li><p>childComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$on(<span class="string">'childMthods'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'this is childMthodOne'</span>)</span></span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li><p>parentComponent.vue</p>  <figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">childComponent</span> <span class="attr">ref</span>=<span class="string">childMthods</span>&gt;</span><span class="tag">&lt;/<span class="name">childComponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    methods{</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">f</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$refs.childComponent.$emit(<span class="string">'childMthods'</span>);</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步编程</title>
      <link href="2021/03/11/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>2021/03/11/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="回调函数">          <a href="#回调函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4>      <p>回调的核心就是回调方A将本身即this传递给调用方B，目的是能让回调方A知晓调用方B的信息</p>        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://ftp.bmp.ovh/imgs/2021/03/095c22d8b27f0815.png" style="zoom:67%;">      <ul><li>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>{</span><br><span class="line">    documnet.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"test"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">setTimeout</span>(print,<span class="number">3000</span>)</span><br></pre></td></tr></tbody></table></div></figure><p>   <code>setTimeout()</code>第一个参数是回调函数，第二个参数是<strong>毫秒</strong>，这个函数会产生一个子线程，3S后执行print()。也常写作：</p>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innnerHTML = <span class="string">"test"</span>;</span><br><span class="line">},<span class="number">3000</span>);</span><br></pre></td></tr></tbody></table></div></figure>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"world"</span>);</span><br><span class="line">},<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>{</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">},<span class="number">500</span>)</span><br></pre></td></tr></tbody></table></div></figure><p>   在 500ms 时取消了timer1的操作，所以只会输出<code>hello</code></p></li><li>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inter1 = seTInterval( <span class="function">()=&gt;</span>{</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">${date.getHours()}</span>:<span class="subst">${date.getMinutes()}</span>:<span class="subst">${date.getSecond()}</span>`</span>);</span><br><span class="line">},<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>{</span><br><span class="line">    <span class="built_in">clearInterval</span>(inter1);</span><br><span class="line">},<span class="number">5000</span>);</span><br></pre></td></tr></tbody></table></div></figure></li></ul><ul><li>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo start'</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">        callback()</span><br><span class="line">    },<span class="number">2000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo end'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">foo( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'callback'</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h4 id="异步ajax">          <a href="#异步ajax" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步ajax" class="headerlink" title="异步ajax"></a>异步ajax</h4>      <ul><li>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">//输出接受到的数据</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = xhr.requestText;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"error"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送异步请求</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"https://www.baidu.com/"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></tbody></table></div></figure><p>   <code>XMLHttpRequestd</code>的<code>onload</code>和<code>onerror</code>属性都是函数，分别在成功和失败时候调用。</p></li></ul>        <h4 id="Promise">          <a href="#Promise" class="heading-link"><i class="fas fa-link"></i></a><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4>      <p><code>Promise</code>是<code>ES6</code>提供的类，用于书写复杂的异步任务。相当于一个状态机。</p><ul><li><p>  promise.then()：获取异步任务的正常结果。</p></li><li><p>  promise.catch()：获取异步任务的异常结果。</p></li><li><p>  promise.finaly()：异步任务无论成功与否，都会执行。</p></li></ul><p>  ​    </p>        <h5 id="resolve和-reject">          <a href="#resolve和-reject" class="heading-link"><i class="fas fa-link"></i></a><a href="#resolve和-reject" class="headerlink" title="resolve和 reject"></a>resolve和 reject</h5>      <ul><li>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    resolve(<span class="number">10</span> / <span class="number">100</span>)</span><br><span class="line">}).then(</span><br><span class="line">    resolve =&gt; {<span class="built_in">console</span>.log(resolve)},   <span class="comment">// 成功时执行</span></span><br><span class="line">    reject =&gt; {<span class="built_in">console</span>.log(reject);}<span class="comment">// 失败时执行</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>  0.1</p></blockquote></li><li>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'global begin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timer1</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer1 invoke'</span>)</span><br><span class="line">}, <span class="number">1800</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timer2</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer2 invoke'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">inner</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'inner invoke'</span>)</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">}, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'global end'</span>)</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>  global  begin  </p><p>  global  end  </p><p>  timer2  invoke </p><p>  timer1 invoke </p><p>  inner invoke</p></blockquote></li><li><p> 异步，但是太多繁琐</p>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"first"</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"second"</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            consloe.log(<span class="string">"third"</span>);</span><br><span class="line">        },<span class="number">3000</span>);</span><br><span class="line">    },<span class="number">2000</span>);</span><br><span class="line">},<span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h5 id="then">          <a href="#then" class="heading-link"><i class="fas fa-link"></i></a><a href="#then" class="headerlink" title="then"></a>then</h5>      <ul><li><p>链式调用 </p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params"> resolve,reject</span>)</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"first"</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    },<span class="number">1000</span>);</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>{</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"second"</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        },<span class="number">2000</span>);</span><br><span class="line">    });</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"thrid"</span>);</span><br><span class="line">    },<span class="number">3000</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></div></figure><p>  相同部分抽出作为新函素，简化为</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">delay,message</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>{</span><br><span class="line">        setTImeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(message);</span><br><span class="line">            resolve();</span><br><span class="line">        },delay);</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//  调用   这种返回值作为一个`Promise`对象的函数成为`Promise`函数。</span></span><br><span class="line">print(<span class="number">1000</span>,<span class="string">"first"</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> print(<span class="number">2000</span>,<span class="string">"second"</span>);</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    print(<span class="number">3000</span>,<span class="string">"thrid"</span>);</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><p>  <code>Promise</code>构造函数只有一个参数，是一个函数，这个函数在构造后会直接异步执行，所以称之为起始函数。起始函数包括两个参数<code>resolve</code>和<code>reject</code>，调用<code>resolve</code>表示一切正常，而<code>reject</code>是出现异常是所调用的。</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> b= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) reject(<span class="string">"Diveide zero"</span>);</span><br><span class="line">    <span class="keyword">else</span> resolve(a/b);</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a/b = "</span> +value);</span><br><span class="line">}).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">}).finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"END"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>a/b = 0</p><p>END</p></blockquote>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1111</span>);</span><br><span class="line">    resolve(<span class="number">2222</span>);</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3333</span>;</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"An error"</span>;    <span class="comment">/*reject()参数会传递异常给后面的catch()*/</span></span><br><span class="line">}).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>  1111</p><p>  2222</p><p>  3333</p><p>  An error</p></blockquote>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        resolve(<span class="number">1</span>);</span><br><span class="line">    }, <span class="number">1000</span>);</span><br><span class="line">})</span><br><span class="line">    .then(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="keyword">return</span> value + <span class="number">10</span>;</span><br><span class="line">    })</span><br><span class="line">    .then(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(value + <span class="number">20</span>));</span><br><span class="line">    })</span><br><span class="line">    .then(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    })</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h5 id="all">          <a href="#all" class="heading-link"><i class="fas fa-link"></i></a><a href="#all" class="headerlink" title="all"></a>all</h5>      <ul><li><p>多个<code>promise</code>同时执行</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve</span>) =&gt;</span>{</span><br><span class="line">    setTImeout( <span class="function">()=&gt;</span>{</span><br><span class="line">        resolve(<span class="number">1</span>);</span><br><span class="line">    },<span class="number">1000</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resovle</span>) =&gt;</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>{</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">    },<span class="number">2000</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span>{</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>{</span><br><span class="line">        resolve(<span class="number">3</span>);</span><br><span class="line">    },<span class="number">500</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all( [p1,p2,p3].then(value) =&gt;<span class="built_in">console</span>.log(values) );</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>  只有全部为 resolve 才会调用，通常会用来处理多个并行操作。一个失败就直接抛出并停止全部任务</p></blockquote></li></ul>        <h5 id="race">          <a href="#race" class="heading-link"><i class="fas fa-link"></i></a><a href="#race" class="headerlink" title="race"></a>race</h5>      <ul><li>  并发处理多个异步任务，只要有一个任务执行成功，就能得到结果</li></ul>        <h4 id="async-amp-await">          <a href="#async-amp-await" class="heading-link"><i class="fas fa-link"></i></a><a href="#async-amp-await" class="headerlink" title="async &amp; await"></a>async &amp; await</h4>      <p>async/await 是 ES7 引进的新语法、本质是 generator的语法糖。</p><ul><li><p>  async 的返回值是 promise的实例对象</p></li><li><p>  await 可以得到异步结果</p></li><li><p>异步函数<code>async function</code>使用<code>await</code>指令，<code>await</code>后跟<code>Promise</code>,异步函数执行到此暂停，知道其运行结束在运行。</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">await</span> print(<span class="number">1000</span>,<span class="string">"first"</span>);</span><br><span class="line">    <span class="keyword">await</span> print(<span class="number">2000</span>,<span class="string">"second"</span>);</span><br><span class="line">    <span class="keyword">await</span> print(<span class="number">3000</span>,<span class="string">"thrid"</span>);</span><br><span class="line">}</span><br><span class="line">asyncFunc();</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>异常处理</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>)</span>{</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">"some error"</span>; <span class="comment">//或者    rejeect("some error");</span></span><br><span class="line">        });</span><br><span class="line">    }<span class="keyword">catch</span>(err){</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">asyncFunc();</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>返回值处理</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>{</span><br><span class="line">            resolve(<span class="string">"return value"</span>);</span><br><span class="line">        }</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">}</span><br><span class="line">asyncFunc();</span><br></pre></td></tr></tbody></table></div></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乡村民谣</title>
      <link href="2021/03/11/%E4%B9%A1%E6%9D%91%E6%B0%91%E8%B0%A3/"/>
      <url>2021/03/11/%E4%B9%A1%E6%9D%91%E6%B0%91%E8%B0%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="乡村民谣">          <a href="#乡村民谣" class="heading-link"><i class="fas fa-link"></i></a><a href="#乡村民谣" class="headerlink" title="乡村民谣"></a>乡村民谣</h3>      <p>才几首歌，就陶醉成这样了</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="2021/03/11/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/11/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>关于JS中的数据类型的笔记</p><span id="more"></span>        <h3 id="数据类型">          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3>      <ul><li><p>值类型(基本类型)：</p><ul><li>字符串（String）</li><li>数字(Number)</li><li>布尔(Boolean)</li><li>空（Null）</li><li>未定义（Undefined）</li><li>Symbol(独一无二的变量)。</li></ul></li><li><p>引用数据类型：</p><ul><li>对象(Object)</li><li>数组(Array)</li><li>函数(Function)</li></ul></li></ul><ol><li>字符串可以是引号中的任意文本。可以使用单引号或双引号。不能使用连字符。</li><li><code>Undefined</code>这个值表示变量不含有值。</li><li>可以通过将变量的值设置为<code>null</code>来清空变量。**<code>null</code>本质就是空对象指针**，<code>null</code>的类型为<code>Object</code></li><li><code>Undefined</code>是从<code>null</code>中派生出来的，<code>undefined === null</code>的结果为<code>true</code></li><li>使用<code>new</code>来声明变量，会降低执行效率</li><li><code>js</code>中储存数值始终是以64位浮点数来操作，但是按位运算都是以32位二进制来进行。</li></ol><ul><li><div class="table-container"><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>&amp;</code></td><td align="center">与</td></tr><tr><td align="center">`</td><td align="center">`</td></tr><tr><td align="center"><code>～</code></td><td align="center">非</td></tr><tr><td align="center"><code>^</code></td><td align="center">异或</td></tr><tr><td align="center"><code>&lt;&lt;</code></td><td align="center">零填充左位移</td></tr><tr><td align="center"><code>&gt;&gt;</code></td><td align="center">有符号右位移</td></tr><tr><td align="center"><code>&gt;&gt;&gt;</code></td><td align="center">零填充右位移</td></tr></tbody></table></div></li><li><p>由于计算机计算本质是位数的转化，无法真正实现精准。所以不要尝试特定的数值。例如</p><ul><li>  0.1+ 0.2 =  0.30000000000000004</li><li>  ～5  // 不是10，而是-6。<strong>因为<code>js</code>使用的是32位有符号数</strong></li></ul></li><li><p>数值计算可能会涉及到<code>Infinity</code>,超出类型指定范围也会被当作无穷。另外，有三个特殊的算式</p><ul><li>  0 / 0 = Nan</li><li>  0 / 正数 = Infinity</li><li>  0 / 负数 = -Infinity</li></ul>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> Nan  <span class="comment">// 返回 number</span></span><br><span class="line"><span class="string">"5"</span> + Nan    <span class="comment">// 结果为 "5Nan"</span></span><br><span class="line"><span class="number">5</span> + Nan     <span class="comment">// 结果为 Nan</span></span><br></pre></td></tr></tbody></table></div></figure>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isNan(<span class="string">"10"</span>)   <span class="comment">// false  字符串可以被转化为数字</span></span><br><span class="line">isNan(<span class="string">"blue"</span>)  <span class="comment">// true     </span></span><br><span class="line">isNan(<span class="literal">true</span>)     <span class="comment">// false  转化为数字1</span></span><br><span class="line">!![]<span class="comment">// true   []为true</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h4 id="typeof和instanceof">          <a href="#typeof和instanceof" class="heading-link"><i class="fas fa-link"></i></a><a href="#typeof和instanceof" class="headerlink" title="typeof和instanceof"></a>typeof和instanceof</h4>      <ul><li><p>  <code>typeof</code> ：返回变量的类型</p></li><li><p><code>instanceof</code> ：返回布尔值,判断是否是对象的实例。</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;  <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> myf();   <span class="comment">//function</span></span><br></pre></td></tr></tbody></table></div></figure>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;          <span class="comment">//typeof number</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">6</span>);      <span class="comment">//Number</span></span><br><span class="line"><span class="built_in">console</span>.log(x==y);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(x===y);     <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></div></figure><p>  基本数值和对象还是不同的，值是单一的，没有属性和方法，而对象有。</p><blockquote><p>  函数本身也是对象，因为<code>function</code>是 <code>Function</code>的实例。<strong>所有引用类型都是对象</strong></p></blockquote></li><li><p>toFixed</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = <span class="number">0.123</span>;<span class="comment">// 0.123  Number</span></span><br><span class="line"><span class="keyword">let</span> temp2 = temp.toFixed(<span class="number">2</span>);   <span class="comment">// 0.12    String</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h3 id="比较">          <a href="#比较" class="heading-link"><i class="fas fa-link"></i></a><a href="#比较" class="headerlink" title="比较"></a>比较</h3>              <h4 id="并列条件">          <a href="#并列条件" class="heading-link"><i class="fas fa-link"></i></a><a href="#并列条件" class="headerlink" title="并列条件"></a>并列条件</h4>      <ul><li>   <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">80</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">50</span> &lt; num &lt;= <span class="number">70</span>);</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>  true</p></blockquote><p>   所以一定要写 <code>num&gt;50 &amp;&amp; num&lt;=70</code></p></li></ul><h4 id=""><a href="#" class="headerlink" title="==="></a>===</h4><p>绝对相等，值和类型都要相等。对于引用类型（object、array）来说，比较的是地址引用是否相同，也就是是否是同一个对象。</p>        <h4 id="-1">          <a href="#-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#-1" class="headerlink" title="=="></a>==</h4>      <p>通常都会自动转换</p><ul><li><p>  对象 == 字符串 等效于<code>对象.toString()</code></p></li><li><p>  <code>null == underfined</code>，但是和其他值比较就不相等了</p></li><li><p>  <code>NaN !== NaN</code> ，NaN 与任何都不相等</p></li><li><p>  其余的都转为数字比较<code>[10] == 10 </code></p></li></ul><p>  ​    </p>        <h3 id="模块化">          <a href="#模块化" class="heading-link"><i class="fas fa-link"></i></a><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3>              <h4 id="es6写法">          <a href="#es6写法" class="heading-link"><i class="fas fa-link"></i></a><a href="#es6写法" class="headerlink" title="es6写法"></a>es6写法</h4>      <ul><li><p>utils.js</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">{Date}</span> </span>date  引入变量有提示</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">${date.getFullYear()}</span>-<span class="subst">${date.getMonth()}</span>+<span class="subst">${date.getDay()}</span>`</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DAY_OF_YEAR = <span class="number">365</span>;</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>index.js</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {formatDate，DAY_OF_YEAR} <span class="keyword">from</span> <span class="string">"./utils.js"</span>;</span><br><span class="line"></span><br><span class="line">consle.log(formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>()),DAY_OF_YEAR);</span><br></pre></td></tr></tbody></table></div></figure>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"index.js"</span> type=<span class="string">"module"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></div></figure><blockquote><ol><li>必须在引入是注明<code>module</code>类型</li><li>同级目录写法<code>./</code></li><li><code>export</code>必不可少</li></ol></blockquote></li><li><p>可以把<code>export</code>汇集到一起，最后写<code>export {formatDate,DAYS_OF_YEAR };</code></p></li><li><p>导入也可以一起导入<code>import  *  as utils from  "./utils.js";</code></p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(utils.default(<span class="keyword">new</span> <span class="built_in">Date</span>()));</span><br><span class="line"><span class="built_in">console</span>.log(utils.DAYS_OF_YEAR);</span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h4 id="其他写法">          <a href="#其他写法" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他写法" class="headerlink" title="其他写法"></a>其他写法</h4>      <ul><li><p>导出内部函数</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnModule</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(x)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> {<span class="attr">f</span>:f}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = fnModule();</span><br><span class="line">consloe.log(fn)</span><br><span class="line">fn.f();</span><br></pre></td></tr></tbody></table></div></figure></li></ul><ul><li><p>公开方法</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnModule</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">this</span>.f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(x)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> fnModule();</span><br><span class="line">obj.f()</span><br></pre></td></tr></tbody></table></div></figure></li></ul><ul><li><p>私有方法</p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnModule</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(x)</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.f = fn  <span class="comment">//隐藏fn,不能直接 this.fn</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> fnModule();</span><br><span class="line">obj.f()</span><br></pre></td></tr></tbody></table></div></figure></li></ul><ul><li><p>set &amp; get </p>  <figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnModule</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">''</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getFn</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(x)</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setFn</span>(<span class="params">name</span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.get = getFn;</span><br><span class="line">    <span class="built_in">this</span>.set = setFn;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> fnModule();</span><br><span class="line">obj.set(<span class="string">'xxx'</span>)</span><br><span class="line">obj.get()</span><br></pre></td></tr></tbody></table></div></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的一些问题</title>
      <link href="2021/03/11/linux%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>2021/03/11/linux%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>我所遇到的linux的一些问题，并附上解决方法</p><span id="more"></span>        <h4 id="系统开机慢？">          <a href="#系统开机慢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统开机慢？" class="headerlink" title="系统开机慢？"></a>系统开机慢？</h4>      <ul><li><p>查看启动占用的时间</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemd-analyze blame</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>禁用</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> NetworkManager-wait-online.service </span><br></pre></td></tr></tbody></table></div></figure></li><li><p>强力禁止</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl mask plymouth-quit-wait.service </span><br></pre></td></tr></tbody></table></div></figure></li><li><p>查看自启服务</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files</span><br></pre></td></tr></tbody></table></div></figure>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files | grep enabled</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>查看服务状态</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status xxx.service</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>启动服务</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mongodb.service</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>关闭服务</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mongodb.service</span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h4 id="Linux中IDEA输入法无法跟随光标？">          <a href="#Linux中IDEA输入法无法跟随光标？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linux中IDEA输入法无法跟随光标？" class="headerlink" title="Linux中IDEA输入法无法跟随光标？"></a>Linux中IDEA输入法无法跟随光标？</h4>      <p><span class="exturl"><a class="exturl__link" href="https://pan.baidu.com/disk/home#/all?vmode=list&amp;path=%2F%E7%BC%96%E7%A8%8B">下载IDEA运行所需的jre</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，将其解压到idea的安装位置</p><figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv java-11.0.7-jetbrain /opt/JetBrains/apps/</span><br></pre></td></tr></tbody></table></div></figure><pre><code>进入目录，编辑启动脚本</code></pre><figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/JetBrains/apps/IDEA-U/ch0/202.7660.26/bin/start.sh</span><br></pre></td></tr></tbody></table></div></figure><p><code>export IDEA_JDK=xport IDEA_JDK=/home/soltuide/Downloads/applications/java-11.0.7-jetbrain</code> （改成自己的 JRE 目录）<br>可以解决，但是  idea 的响应速度会变慢很多</p><p>方法二:直接安装 choose runtime插件,选择 下载的jar包</p>        <h4 id="MySql">          <a href="#MySql" class="heading-link"><i class="fas fa-link"></i></a><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h4>      <p><code>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)</code></p><pre><code>`manjaro` 和其他 `linux` 中 `socket` 位置不在`var/lib/mysql.socket`</code></pre>        <img class="lazyload lazyload-gif" src="/images/loading.svg" data-src="https://s1.ax1x.com/2020/08/16/dA7YOH.png" alt="dA7YOH.png" style="zoom:67%;">      <figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/run/mysqld/mysqld.sock</span><br></pre></td></tr></tbody></table></div></figure><p><strong>注意无空白符</strong></p><figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务</span></span><br><span class="line">sudo systemctl stop mysqld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重看状态</span></span><br><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></tbody></table></div></figure><p>如果还是不行的话，就是因为本身是破解版，将127.0.0.1对应的localhost指向为特定的地址。此时需要把所有该软件内的<code>localhost</code></p>        <h4 id="Ubuntu中的问题">          <a href="#Ubuntu中的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#Ubuntu中的问题" class="headerlink" title="Ubuntu中的问题"></a>Ubuntu中的问题</h4>      <ul><li><p>开机进入initramfs，黑屏命令状态<br>  可通过u盘，进入Ubuntu试用，为了方便直接操作。直接用<code>fsck</code>检查，输入：</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsck -t ext4 /dev</span><br></pre></td></tr></tbody></table></div></figure><p>  (-t是指文件系统类型)，一个个尝试，到最后会找到有问题的分区，询问修复，一路<code>y</code>,最后直接手动重启（启动盘live模式里有<code>reboot</code>和<code>shutdown -r now</code>）</p></li><li><p>双系统时间无法同步</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ntpdate</span><br></pre></td></tr></tbody></table></div></figure>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ntpdate time.windows.com</span><br></pre></td></tr></tbody></table></div></figure>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hwclock --localtime --systohc</span><br></pre></td></tr></tbody></table></div></figure></li></ul>        <h4 id="manjaro更新后启动项">          <a href="#manjaro更新后启动项" class="heading-link"><i class="fas fa-link"></i></a><a href="#manjaro更新后启动项" class="headerlink" title="manjaro更新后启动项"></a>manjaro更新后启动项</h4>      <ul><li><p>第一种方法</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo os-prober</span><br><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg </span><br></pre></td></tr></tbody></table></div></figure></li><li><p>第二种方法 (第一种无效，直接修改<code>/boot/grub/grub.cfg</code> )</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /boot/grub/grub.cfg</span><br></pre></td></tr></tbody></table></div></figure><p>  在上面后添加</p>  <figure class="highlight sh"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### BEGIN /etc/grub.d/30_os-prober ###</span></span><br><span class="line">menuentry <span class="string">'Windows Boot Manager (on /dev/nvme0n1p1)'</span> --class windows --class os <span class="variable">$menuentry_id_option</span> <span class="string">'osprober-efi-DFF1-B984'</span> {</span><br><span class="line">    savedefault</span><br><span class="line">    insmod part_gpt</span><br><span class="line">    insmod fat</span><br><span class="line">    search --no-floppy --fs-uuid --<span class="built_in">set</span>=root DFF1-B984</span><br><span class="line">    chainloader /EFI/Microsoft/Boot/bootmgfw.efi</span><br><span class="line">}</span><br><span class="line"><span class="built_in">set</span> timeout_style=menu</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">${timeout}</span>"</span> = 0 ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">set</span> timeout=10</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">### END /etc/grub.d/30_os-prober ###</span></span><br></pre></td></tr></tbody></table></div></figure></li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
